import requests,hashlib,re,json,base64

url ="http://www.python-spider.com/api/challenge19"
headers={

    "Accept": "application/json, text/javascript, */*; q=0.01",
    "Accept-Encoding": "gzip, deflate",
    "Accept-Language": "zh-CN,zh;q=0.9",
    "Cache-Control": "no-cache",
    "Content-Length": "6",
    "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
    "Cookie": "sessionid=ixlw76ckeng4q3i3d75l5bayscyuypau; Hm_lvt_337e99a01a907a08d00bed4a1a52e35d=1615267254,1615351495,1615365571,1615375348; Hm_lpvt_337e99a01a907a08d00bed4a1a52e35d=1615375395",
    "Host": "www.python-spider.com",
    "Origin": "http://www.python-spider.com",
    "Pragma": "no-cache",
    "Proxy-Connection": "keep-alive",
    "Referer": "http://www.python-spider.com/challenge/19",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36",
    "X-Requested-With": "XMLHttpRequest",

}

img_dict = {
   'iVBORw0KGgoAAAANSUhEUgAAABoAAAAjCAMAAAC94eqZAAAAAXNSR0IArs4c6QAAAN5QTFRF+fv9od/9+fvb6axkUAAA2fv9+frlAAAAAABQ+d+jAEedFFuhbgAAFgAAyY0wAABC7fv9AB48Vqblq14Au/D9AAAamdn9PFxv8bdyfsT9aLHw+fHF+fO7ABhyAHrF+fv1fjAA+fvISJ3biYl6+cWD+eO7AACDaEwoiVQgQCoYmUQAIGCrQBgAAABqwYE4yaub+dmbcKPToVQAoVwY+fvt0aNysWo4kaPFQAAA4fP94adYgQAAcGBAiS4AFkyDNoHFeImL+euzIHa7ueP9AC6DUKHbcImLKEBiAIHFyef90jE/4QAAAQNJREFUKM9jYIADNn0bTXZ2QXFzSwZUIG+qww4FgoYCyDJMZuxIQJsVSY8eSERU3EFZnRfEckLokwAJcHuCmKoaIEVSMBlFW5AM1BQmYyDHRQQqxQzkyMI4DNIKQC5UG5sRkK2EsBmkkgtiBicLOzu/GEJKhgfOl0CogpgiDBQQAjP5gCw5ZF/CBcCKXJGlrEDGgF2rhXARBKgABdTAvrIGsiSRpQws2Nl10RwEBSAnc8AZjAMuBXIhDik8/gKHhiTW0DBBBDRSGHLDA9oDa8jjiy901zsiAhVP2sCWopSQOSjpEKGQGZR67ZwRqVcIPc27u0HTvL0AMTkFGCQ48xeWXAkAP2Ubepd6ecoAAAAASUVORK5CYII=':0,
   'iVBORw0KGgoAAAANSUhEUgAAABoAAAAjCAMAAAC94eqZAAAAAXNSR0IArs4c6QAAAF1QTFRFAAAAoVQAPAkAxYQ8+cWD+fvnGQAA+fv9AFSj4fv97fv9+eaz8cmHYJ3TgavTueP9ibvlIFSLFhgYACRQoXJIIGCjAAAg+evT6bd6qWRYcEAYcBgA2aNY2buD+fv1QCX7aQAAAGBJREFUKM/ty0kOgCAUA9CvCCg4z/P9j2lgYWLoTzwA3bUvJc2GPs0elBeQbkEcnYqjMiWGvEBavQCSQhEmu7u5D2kZ/WW6ApKJg7kyGaau0RrS0LoCaKuNxvQmUqR/9ACWThad7ZHt3QAAAABJRU5ErkJggg==':1,
   'iVBORw0KGgoAAAANSUhEUgAAABoAAAAjCAMAAAC94eqZAAAAAXNSR0IArs4c6QAAAWJQTFRF+fv96fv9mdn9+euz+fvt3aJQ+fvbAAAA+fv12fv9IAAA+fvIXabbvOH4rOn9iYmL9MWAwfv9AABlMAAAAAA4hMn9NgAAgQAA8d+7odHtQDAcuXINwYEYaHqLG1ajiVAcaK/t+c2Lve39+fPp+e/JAAAgADaDSA0AACRMFkyHpV4NAAAYTKDgoVQAXB4AAC6HaAAAwfH9iXZmIDZQFgAAAABEAACDeGZQDGaz4cWTAEByiYl6yev9+d+jUCQAIEhymUQA4dW7cKPTgUAYuYlQABiD+d2jmUgAMInNmYmLABhYgcX1QERi+fO7+evTQEQ4ABhy6cGDcJGj6cGLAHK76atiyfv9wYE4ADZqAGCrqZ2LaCpAaFQ48fv9mWAgcAAA4cWj2cW7UGZ6sWYA0aNyUDYgNo3NyY1IiWZQ0Z1IoYFQ+fvlAEibicHtIFSLqd/9ABgosdX1iS4AAESbQDZQaK/blFkJ4AAAAU5JREFUKM+Fk2VDAkEQhomTAUUBBQUMDKQUEQsbu7u7u/P/O3t7t7ssq86nmXvu3smzWP4359ldGOBtaaNcJpujYNpLAXTe9gA3/7eA7nXSXe/pChOnzc2ItxrjvZDuD3Sgv/BqEMcsRrGsEc0QNmcETVWoH2Aa24imfdSvQ3/fypC9E6DXRvXGEDXymspqMKYizvOD3JeNo+VTrDGgnAtJXVmhIo406vVbFWTlBFgVorWMP5QiaXXLs681Zph4lj95TFMy+F6kpvejWz4kIfvhhWfoiOQqTkYrmSLQv6hseZ2sKJNVshIoHKpYzweirWMlI1v6dP2q2Of7GwXnc6sNLhlldsg9gbQf7dJcC7kFaBfQSNx8oKXQW2vmu0xxGS9uHFg2bZd0fCMuKkn/gmCEBE/mi9FJMG/+WvdiXD4aAdGSw2K9V3EGEhP0nH4AdB0nRQhEwa4AAAAASUVORK5CYII=':3,
   'iVBORw0KGgoAAAANSUhEUgAAABoAAAAjCAMAAAC94eqZAAAAAXNSR0IArs4c6QAAARdQTFRF+fv92fv9NAAA+fv1+fvlAAAYAIHFAAAA8fv9FgAAAAA6oVQA+e3Fmdn9od79+fvN8bp3AABKACA6ABhY+fvbNnC3FlyfhUYY+eWrVJ3Xqd/9aK/bbFo8DDuDuXQNcLf1QIXFACRinVwYxYk8fTYA+c2Lwe39Fna7iS4ASERAYDANXB4AIAAA+fvt+d2j+fvFWKXggcPxAEib+e/QgRgAcJ2r2aNYiTYA0e/9gQAA6cGDsWo4wYE4KBhQKBgAqVwA+d2zmYmL2ZlIAABiiYmLSBgAyd/1qef9+ee7UGZ6wYEA6fv9kcXlueP9mXpqMI3NQERiiYl6IFSLWAAAuYlQ6dWzSI3N2a9qYAAAyY1I6cGL8c2LYKvt2JmUjQAAAR1JREFUKM910mlbwjAMAOAhg3KfgqKgXCqIiAh4AIrgCXgrKOL//x0mkY7uWZZPXd+maddo2iKck+fypRCx19adZo6ffWHE+5MC1YJXKOHbNMTZpZnY8OYtfUBWlxTBnNwjjfVPxPjGv4RP4SOzKxe2V+Bzz2MkRYPLygOg63uqtLVcRbH+DRPbtF9Jjhah+2EiRYs+YL+QeskRkBsHgX66fKGS3gN60bioNYGOWMIT+4Kc0CmOHRyd4L/55eSwYpd0ha8T5SoFiiAu7ngPJFmPTR1W5rcoU0a+8KFcKatUZ15zWxix2qH2qFulkUfJhZjrrAlTfyg5JMkzpg7tluD+W4FkzMgO3ifpsHs62a5MkiXcskN5og7lqXZuQ38KGhzS8FaWQgAAAABJRU5ErkJggg==':2,
   'iVBORw0KGgoAAAANSUhEUgAAABoAAAAlCAMAAABruAmEAAAAAXNSR0IArs4c6QAAAIFQTFRF+fv9hcb9+fDH+fvzQERAAAAYABhYAAAAAIHF4aNQ98WD5Pv9Fl+uXRgAFgAAXaro+fvbNAAAtWwY2aJQyYk4eC4A+duf8bx2oVgNgTYAFlyj3aVY2fv9+cuPWKPbod39qd/9gXpQQCoYwYE4+d+rSAAA+eezsef9ACQ4ABhqmUgAvyuUPQAAAKVJREFUKM/V0skSgjAQRdGGiC2oiBM4ASo4/v8H2smCIbxUWe58q1RO1V010ffzt8wTKGrFLspiF93n7CCTw3SMXVSbHKJkxzy+QJJcUKwRpZI7nEJAJlcSIikFBSFKbzqHKHmbHKKN5BaEKF8yz6aI/L3kzgRINbkBRU3Opk7OIlW1OYuyTq5P+oReD0IUMZ73K+Wj3q7y+9QPb3AFofN6/5vafQB+Gg2W8rL+LAAAAABJRU5ErkJggg==':4,
    'iVBORw0KGgoAAAANSUhEUgAAABkAAAAlCAMAAACAj7KHAAAAAXNSR0IArs4c6QAAAS9QTFRF+fv9+d2h+fvt4fb9od/9AABQ+fv1AAAAAAAYGAAAcGBAADCI9Lt1wXwAsWYA+fnCdQAAACA6AAA9+erF+fvN98eDAEibUwAAiYmL8fv9gRgAQGByye39PwAAyd/1AABYWBgAFkyL6fv9DHK7ABgodLz5+eGryfv9NiQAVKHbRBgA3aRU+fnleLft7evtwe/9UCQA+fvbhTIAqeP9aK/tAAAgAABI8c2LmYmLaFRAqZ164cWjQFRqoVAAKBgAQHqz8d/NQDYg2ZlIuXIY4dXF6cGD+euzoVQAibvl4buLeImLaAAAeJ2rsWYYuXIA2fv9wZFiKFiLNlRq2Z1IWJHNQEQ4ueP9wauDQJnbAGqjyY0wIC56mdn9kaPFgcn9FmaziVgomUQAAFSjiWZQACRQopPdIwAAATlJREFUKM+Fk2dbwjAUhVtHb1pALXVUUVTEhQxxbwTFhXvv/f9/g8mlLenjzdN8SvI2NyfnnmpaxOjugfDo7PCIPqAicVCRZxVp6+KLSUpA7xDA6CJFpriA2DRFhICJQYrMcTJLAeMcgL2TAhZUAg4aQoCx+VMFsFNv7S3SZwI8Pcz7r8zeZmQBoTE+7JGE923Kda0ZnMZKCMrbYvF7hA8yjrHqRyZoTlBAc7hSYOiis2bdvZRagvQxjvrJDtc4SZIEO0yS8peKYCPpKCWiSbG4n5ZB/rBJRAjg8V8u/fu+JevRe3zPDScrr5K0M98DfSQckDg/wpbQ3j1hYZCQ1Zw4ctGMm7CQVfCq/KUpx7ou6sHy9Ylr7YhZshCUrufkZtsFSajzafr77Oo+7MjuxjrPgL11mo76Qf8AIxAgoP2MorAAAAAASUVORK5CYII=':5,
    '/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wgARCAAkABkDASIAAhEBAxEB/8QAGQAAAgMBAAAAAAAAAAAAAAAABgcABAUD/8QAFgEBAQEAAAAAAAAAAAAAAAAAAQAC/9oADAMBAAIQAxAAAAHSoVr5cTrC3dZVbRADIQpirpi1xG5J3rkjn//EABsQAAIDAQEBAAAAAAAAAAAAAAIEAQMFAAYV/9oACAEBAAEFAtbQspKMA7Bz2mFNDq7a59CfoB5NtPQnqloZ34GBFwIz93n4LO2QdVOqT+tudZUF1c+fSk11qVa+/8QAGREAAgMBAAAAAAAAAAAAAAAAAAEQMTJB/9oACAEDAQE/AXcPQ7OR/8QAGREAAgMBAAAAAAAAAAAAAAAAAAEQMTJB/9oACAECAQE/AVULIsnY/8QAKhAAAQIEAgkFAAAAAAAAAAAAAQIDAAQREhATFCIxMjNBUZGhISNScsH/2gAIAQEABj8CRKy3Hc8Re/Nqzu9I0CaVeDuqOEw+8oBDQPqe0VblXFN/ImkZiEJzU7bk6wwcac3cxRI6xaAAOkMuM6qV0qB5wRO0q2vb+xmB9u37Qgt8FrngUOJCknkYr7gHQKixlASMP//EACIQAQABBAICAgMAAAAAAAAAAAERACExURBxYZFBgaHB0f/aAAgBAQABPyEOZ+QuhxHmg6KvMQXay0mbYMmNX08eMSoRFRKdN/5DSOAiAezXHpqmCsUUGSAFgoRJKwrsDgiNWHUD91hXZVBHeqiKsK7gzP28Zs7BUSvWn5Jrau4y9vH/2gAMAwEAAgADAAAAEMyXS4If/8QAHBEAAgICAwAAAAAAAAAAAAAAAAERMUFRIYGR/9oACAEDAQE/EJJlhcd5FEuKJtnui2NL0yFR/8QAHhEAAQQBBQAAAAAAAAAAAAAAAAERMUEhUWFxgZH/2gAIAQIBAT8QYxbXPVGWR5I00nkiffyigsn/xAAgEAEAAgAHAQEBAAAAAAAAAAABESEAEDFBUWGBcZGh/9oACAEBAAE/EE0QKhJADUmbdA9Dg5SuI/QVhSdSFJJgrQqHRrnJ4wIlUkG7bAWriAg6MHgH6mCLqgoNJaQrCNTtOQGOpSQB8LHmILxpHAAqMDLq0WSBslxy5DrusbvqRTnzAnVAz1CiunBT1kCCy6SQbxeRTZieHvp71MXTSYr8yn9YnwDNyvKWv3L/2Q==':6,
    'iVBORw0KGgoAAAANSUhEUgAAABkAAAAlCAMAAACAj7KHAAAAAXNSR0IArs4c6QAAAK5QTFRF+fv96fv9+fv1MozNgcX9ufP9TAAAAAAA+fvloVQAod39FgAAMwAASJ3bABh6AA1UAGOv+ffNwX4wfQAAaAAA+fHADHS7gTYAwYEN2ZtIue/9+fvF+dmb8fv98bx2AAByAAA0UKLgABhycLf1+euzAAAY4addFmaz+d+j9cmDwfP9mUQA+fvbic39AABI2fv9AC6DaK/tuXYYeBgAAESb4aNQgcX1yYkwWKPbiS4A4f6kdQAAALNJREFUKM+tk8cSgkAQRAdFV8GEATNiQjHn8P8/5oBHuw9UOddXHWa2VoROqWzQ2P8kdQcER64x4QOAuGLM8gVAp6teK+sX5JoKZgMgCRKvMwAe85I+K7wuKslLlvhRIqkiyUXBacNSkESeCmoFdJcrKSaRgoPDXr1hscpzIYeB+amZPwZk0WZmgYIJMpMea7bbKpkKiQn3iMQui7mr2e3ICsBt0j3hnb03qzZsfT9GFoLmA5nrDvr/6ZwVAAAAAElFTkSuQmCC':7,
    'iVBORw0KGgoAAAANSUhEUgAAABoAAAAlCAMAAABruAmEAAAAAXNSR0IArs4c6QAAAVBQTFRF+fv96fv9AAA1+d+jTQAA+frb2fv9AAAANAAAFgAA+fv1IAAAG16l4aNQw/v9+frtAAAawe79AABQic39iYmL5Pn9qWAA8ceDUGZ6ADaDAFKjFkBymUUAAEab8fv9eLv1AACDACQ4DHK7+cmDZKXXaAAAWEIwaDsc6dOvufP9tYlQUKLgM3zAJFyTDCdE8dWf+fnl6cGHoc3tcKPTwYE4WBgAdLfx9cF6wYEAod/9eRgAZK3t8bdyzfH9+dmbUCQAoVwY2aNYAIHF2ff9iYlyABhA+euzAC6L+fvN+fPlgcX1FoHF2a9qAC56oVQAiYl6IDZA4buL6a9q8d+7MI3NueP9+e+7uZVimcXlgVQgFkCDAAB6mXpqmcXbAABIgUwYmbPTmdn9aFQ4YHKLyaNqod39ABh6oWAg8ePTAAByuXYY2Z1IyY1IFmazADZqAEqese4bOQAAAWpJREFUKM+1UldbAjEQPEUJnHieCopiF1EUBFTAjgXsvffe2/9/dLPJJXt+92qedjOb3cnMGsZ/naGrRB1je9G7qj9AZpA5pzLuArcCjJzQskZaEemNhsviccjvICfTkFbHsc/hLcdGHOiTIxsyqV2A7CUpkw5IUl1O4XwNpAURrwzAo2Y1OLsD0JGIfVDWNKVJTQK0RKBnT2iNE5xRCI6WFM0PiDvVV2aDjN3cU04pKY8vD0mf4rsIhSx2HTGMt2HQmLU16sm5EtUwPUf1zZ4qgX/G3Gadk0ejxBXzK4hXj+FyAqMLZ5Y5wdOY6LPu4oFuaYtyPP3Gng0tvIyQ4l8RcnMJ7W7CCZXaRGEguLQo33pHOB60RyjUDx17LE9IGYiQ3/NVEaD3JIUO4GbVkqtBnJS/QVsw2iY2FAPqN0INtcyZvDZdangmuj3xQrV7uLC487sPXFxmx7U0r9RkVilQvvt6A+z0sbj7Bdh2KpzcpBFrAAAAAElFTkSuQmCC':8,
    '/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0aHBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wgARCAAkABoDASIAAhEBAxEB/8QAGQAAAwEBAQAAAAAAAAAAAAAAAAQHBgEF/8QAFgEBAQEAAAAAAAAAAAAAAAAAAAEC/9oADAMBAAIQAxAAAAF5VahGX1E9oVmH6/pYllWn9APImoS1VwNZ/8QAHhAAAQUAAgMAAAAAAAAAAAAAAwABAgQFBhESExX/2gAIAQEAAQUC1NMgTNn6/WbpTMVUW8+RrQl6uRLSpWAXIb05tYCdtNF05g1nk0Yhf6e+r1ENwVcDHt1qwqgl/8QAGBEAAwEBAAAAAAAAAAAAAAAAAAExEUH/2gAIAQMBAT8Bdw6Ojo4I/8QAGREAAwEBAQAAAAAAAAAAAAAAAAExETJB/9oACAECAQE/AVNPNFBcioz/xAAoEAACAAMFCAMAAAAAAAAAAAABAgADBBAREhMxFCEiI0FCUVIzobH/2gAIAQEABj8CFLSi+cdT4jM23meuI3Q1LVLhqF+7J5fUYrrJDrrw32CvowSe5RGBaNzO9QYp3qTzprBio7d9gppqqso6PGIkADrGcvwyetnNG9dGGsbM7vl3+Yy5K3D9s//EACIQAQACAQQCAgMAAAAAAAAAAAERIQAQMUFxUZFhsaHB0f/aAAgBAQABPyGmc6JtsB5wl83Tb+M6NFiv70IbLufcfWg1xbfyp9aTFHIJZ65HOFFWCfU4Wl4cFA0hT3JM2V+axoMpU0Gbpux029t6XdiVsDDcGgBkbzd8ry6f/9oADAMBAAIAAwAAABDAB0qIH//EABsRAAICAwEAAAAAAAAAAAAAAAABITERQZGB/9oACAEDAQE/EIPooGsMjoW+dNpQ/8QAHREAAgEEAwAAAAAAAAAAAAAAAAEhETFBkWFxgf/aAAgBAgEBPxBI5OROqdlohwLHusGMuP/EACEQAQACAQMFAQEAAAAAAAAAAAERITEAEEFRYXGBkaHh/9oACAEBAAE/EKQ8CW8gpWboI9TEwfMERf1HfRd5dkAyrAM1SWbEchQwgEe7tEzBLlKz8GwUWFZAhYWCkLM9zrr8u4ijxHvnS+oBqCFlwH9bdhHcmBFhZgIqrUf5njqFeNPACDGgk/tUdjZ8BMBRlJREeiOoiPYJ4ET80OA2VZ6g5dv/2Q==':9,

     }

l = []
lists = []
for page in range(1,101):

    for j in range(1,8):
        print("第:" + str(page) + "页\n")
        data = {
            "page": page,
        }


        response =requests.post(url=url,data=data,headers=headers)
        if response.status_code != 200:
            continue
        response = json.loads(response.text)
        # print(response)
        j_key = hashlib.md5(base64.b64encode((response['key'] + response['value']).encode()).replace(b'=', b'')).hexdigest()
        print("5555555555555",j_key)
        img_list = re.findall(r'.*?<td class="info"(.*?)</td>', response['info'])
        print(len(img_list))
        for img_str in img_list:
            # print(img_str,"\n"*4)
            imgs = re.findall('(?<=<img).+?(?=>)', img_str)
            out = ['', '', '', '',]
            i = 0
            for img in imgs:
                # print(img)
                number = re.findall('(?<=data:image/png;base64,).+?(?=")', img)[0]
                # print(number,"88888888")
                imgclass = re.findall('(?<=img_number ).+?(?=")', img)[0]
                imgstyle = int(float(re.findall('(?<=style="left:).+?(?=px")', img)[0])/9)
                if imgclass != j_key:
                    out[i + imgstyle] = img_dict[number]
                    i += 1
            lists.append(out)
        break

for r in lists:
    # print(r)
    num = ""
    for i in range(4):
        num += str(r[i])
    l.append(int(num))
print(lists)
print(sum(l))




print(sum(l))
